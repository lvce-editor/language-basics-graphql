type ValidationError implements ErrorInterface {
  """Combined error message from all validators"""
  message: String

  """List of validator errors"""
  errors: [ValidatorError!]
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

type ValidatorError {
  """Validation error message"""
  message: String

  """Source of the validation error from the model path"""
  path: String

  """Field value which occurs the validation error"""
  value: JSON

  """
  Input record idx in array which occurs the validation error. This `idx` is useful for createMany operation. For singular operations it always be 0. For *Many operations `idx` represents record index in array received from user.
  """
  idx: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MongoError implements ErrorInterface {
  """MongoDB error message"""
  message: String

  """MongoDB error code"""
  code: Int
}

type RuntimeError implements ErrorInterface {
  """Runtime error message"""
  message: String
}

""""""
type Character implements CharacterInterface {
  _id: MongoID!

  """Character type Droid or Person"""
  type: EnumDKeyCharacterType
  name: String
  height: Float
  mass: Float
  films: [String]
}

interface CharacterInterface {
  _id: MongoID!

  """Character type Droid or Person"""
  type: EnumDKeyCharacterType
  name: String
  height: Float
  mass: Float
  films: [String]
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

enum EnumDKeyCharacterType {
  Droid
  Person
}

type Droid implements CharacterInterface {
  _id: MongoID!
  type: EnumDKeyCharacterType
  name: String
  height: Float
  mass: Float
  films: [String]
  makeDate: String
  primaryFunction: [String]
}

type Person implements CharacterInterface {
  _id: MongoID!
  type: EnumDKeyCharacterType
  name: String
  height: Float
  mass: Float
  films: [String]
  gender: String
  hairColor: String
  starships: [String]
}

type Query {
  characterMany(
    """Filter by fields"""
    filter: FilterFindManyCharacterInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCharacterInput
  ): [CharacterInterface]
  characterById(_id: MongoID!): CharacterInterface
  droidMany(
    """Filter by fields"""
    filter: FilterFindManyDroidInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyDroidInput
  ): [Droid!]!
  droidById(_id: MongoID!): Droid
  personMany(
    """Filter by fields"""
    filter: FilterFindManyPersonInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyPersonInput
  ): [Person!]!
  personById(_id: MongoID!): Person
}

""""""
input FilterFindManyCharacterInput {
  """Character type Droid or Person"""
  type: EnumDKeyCharacterType
  name: String
  height: Float
  mass: Float
  films: [String]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCharacterOperatorsInput
  OR: [FilterFindManyCharacterInput!]
  AND: [FilterFindManyCharacterInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCharacterOperatorsInput {
  _id: FilterFindManyCharacter_idOperatorsInput
}

input FilterFindManyCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyCharacterInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindManyDroidInput {
  _id: MongoID
  name: String
  height: Float
  mass: Float
  films: [String]
  makeDate: String
  primaryFunction: [String]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCharacterOperatorsInput
  OR: [FilterFindManyCharacterInput!]
  AND: [FilterFindManyCharacterInput!]
}

enum SortFindManyDroidInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindManyPersonInput {
  _id: MongoID
  name: String
  height: Float
  mass: Float
  films: [String]
  gender: String
  hairColor: String
  starships: [String]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCharacterOperatorsInput
  OR: [FilterFindManyCharacterInput!]
  AND: [FilterFindManyCharacterInput!]
}

enum SortFindManyPersonInput {
  _ID_ASC
  _ID_DESC
}

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  characterCreate(record: CreateOneCharacterInput!): CreateOneCharacterPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  droidCreate(record: CreateOneDroidInput!): CreateOneDroidPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  personCreate(record: CreateOnePersonInput!): CreateOnePersonPayload
}

type CreateOneCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: CharacterInterface

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneCharacterInput {
  """Character type Droid or Person"""
  type: EnumDKeyCharacterType!
  name: String
  height: Float
  mass: Float
  films: [String]
}

type CreateOneDroidPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Droid

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneDroidInput {
  name: String
  height: Float
  mass: Float
  films: [String]
  makeDate: String
  primaryFunction: [String]
}

type CreateOnePersonPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Person

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOnePersonInput {
  name: String
  height: Float
  mass: Float
  films: [String]
  gender: String
  hairColor: String
  starships: [String]
}
